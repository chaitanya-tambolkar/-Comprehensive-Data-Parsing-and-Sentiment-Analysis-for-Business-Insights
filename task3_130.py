# -*- coding: utf-8 -*-
"""task3_130.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ki_H4ZrypZnel0F0dOiCeT8mYPy5txXR

<div class="alert alert-block alert-success">
    
#### Student Name: Fahmid Tawsif Khan Chowdhury
#### Student ID: 34121315

#### Student Name: Chaitanya Tambolkar    
#### Student ID: 34093117

Date: 30 August 2024


Environment: Python 3.11.5

Libraries used:
* pandas (for data manipulation, installed and imported)
* json (for reading and manipulating JSON files, installed and imported)
* matplotlib.pyplot (for data visualization, installed and imported)
* seaborn (for statistical data visualization, installed and imported)
* collections.Counter (for counting and frequency analysis, installed and imported)
* re (for regular expression, installed and imported)
* nltk (for natural language processing, installed and imported)
* nltk.sentiment.vader (for sentiment analysis, installed and imported)
    
</div>

<div class="alert alert-block alert-danger">
    
## Table of Contents

</div>    

[1. Introduction](#Intro) <br>
[2. Importing Libraries](#libs) <br>
[3. Examining Raw Data(given input file from task1)](#examine1) <br>
    - [3.1. Examine the .CSV File](#csv) <br>
    - [3.2. Examine the .JSON File](#json) <br>
[4. Examining metadata](#examine2) <br>
[5. Data Analysis](#DA) <br>
    - [5.1. Insight 1: How does Rating affect Response? ](#5.1) <br>
    - [5.2. Insight 2: Relationship between Text Sentiment and Response](#5.2) <br>
    - [5.3. Insight 3: Effect of Covid-19 on Reviews and Business](#5.3) <br>
    - [5.4. Insight 4: Comparison of Highest Rated and Lowest Rated Businesses](#5.4) <br>
    - [5.5. Insight 5: What Relationship does Price have with Review?](#5.5) <br>
[6. Summary](#summary) <br>
[7. References](#Ref) <br>

<div class="alert alert-block alert-warning">

## 1.  Introduction  <a class="anchor" name="Intro"></a>
    
</div>

We conducted a comprehensive data analysis using the Google Reviews dataset and its associated metadata. Our goal was to explore how various factors, such as review ratings, business responses, pricing categories, and the impact of COVID-19, influence customer engagement and satisfaction. By merging, cleaning, and analyzing the data from multiple sources (.CSV, .JSON, and metadata files), we were able to extract meaningful insights that offer a deeper understanding of business-customer interactions in California.

<div class="alert alert-block alert-warning">
    
## 2.  Importing Libraries  <a class="anchor" name="libs"></a>
 </div>

The packages to be used in this assessment are imported in the following. They are used to fulfill the following tasks:

* **re:** to define and use regular expressions
* **pandas:** (for data manipulation, installed and imported)
* **json:** (for reading and manipulating JSON files, installed and imported)
* **matplotlib.pyplot:** (for data visualization, installed and imported)
* **seaborn:** (for statistical data visualization, installed and imported)
* **collections.Counter:** (for counting and frequency analysis, installed and imported)
* **re:** (for regular expression, installed and imported)
* **nltk:** (for natural language processing, installed and imported)
* **nltk.sentiment.vader:** (for sentiment analysis, installed and imported)
"""

import pandas as pd
import json
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
import re
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

"""<div class="alert alert-block alert-warning">

## 3.  Examining Raw Data(given input file from task1) <a class="anchor" name="examine1"></a>

 </div>

In this section, we examined the .csv and .json output files from Task 1 through exploratory data analysis (EDA) to extract valuable insights. Our analysis focused on customer and business interactions, relationships, and the distribution of reviews and ratings, revealing intial key patterns and trends that inform business strategies.

<div class="alert alert-block alert-info">
    
### 3.1. Examine the .CSV File <a class="anchor" name="csv"></a>

Here, we carry out the analysis of the Google Review data contained within a .CSV file. The primary objective is to explore the dataset’s structure and extract key insights from the numerical variables it contains. We begin by loading the dataset and examining its initial structure to understand the nature of the data we’re working with.

To gain a foundational understanding of the data, we  generate summary statistics for the numerical columns. This step helps us identify the central tendencies, variability, and distribution patterns within the dataset. By examining metrics such as the mean, median, and standard deviation, we can make informed decisions about the data’s characteristics and identify any significant outliers or trends.

We then visualized the distribution of these key variables using histograms. These visual representations allow us to assess the variability in review counts, the frequency of textual feedback, and the level of engagement businesses have with their customers through responses. The histograms complement the summary statistics by providing an intuitive understanding of how the data is distributed across the dataset.

We conducted a correlation analysis to explore the relationships between these variables. By examining how review_count, review_text_count, and response_count interact, we can uncover patterns that suggest how different aspects of customer-business interactions are related. For example, we explore whether businesses with more reviews tend to receive more text-based feedback or if there’s a correlation between the number of reviews and the likelihood of a business responding.
"""

# Load the dataset
df_csv = pd.read_csv('task1_130.csv')

# Display the first few rows to understand the structure
df_csv.head()

"""
The dataset comprises key variables such as gmap_id, review_count, review_text_count, and response_count. These variables provide a snapshot of how frequently businesses receive reviews, how many of these reviews contain textual feedback, and how actively businesses respond to customer reviews.
"""

df_csv.info()

# For the CSV DataFrame
print("CSV DataFrame Summary:")
print(df_csv.nunique())

"""We generated summary statistics for the numerical variables in the dataset to gain a foundational understanding of their central tendency, dispersion, and overall distribution. The describe() function was applied to the df_csv DataFrame, which provided key metrics such as the mean, median, standard deviation, and range for each numerical column. By examining these summary statistics, we can make informed decisions about the data."""

# Summary statistics for numerical columns
df_csv.describe()

"""We created histograms to visually explore the distribution of key numerical variables, specifically review_count, review_text_count, and response_count. For this analysis, we generated histograms with 30 bins to capture a detailed view of the distribution. The histograms were plotted on a 10x10 figure to ensure clarity and readability, allowing us to assess the variability and distribution patterns of these variables across the dataset. This visual analysis complements the summary statistics by providing an intuitive understanding of how the data is distributed."""

# Histograms
df_csv[['review_count', 'review_text_count', 'response_count']].hist(bins=30, figsize=(10, 10))
plt.suptitle("Histograms for Numerical Variables in df_csv")
plt.show()

"""The trends and patterns from the summary statistics and histograms are as follows:

- The histogram for review_count clearly shows a wide variation among businesses. While most businesses have fewer reviews, there are a few outliers with a significantly higher number of reviews. This is consistent with the high standard deviation of 278.32 compared to the mean of 201.74. The maximum number of reviews, reaching up to 2009, further highlights this disparity.
<br><br>
- The histogram for response_count is heavily skewed to the right, with the majority of businesses having a response count of 0. The median value being 0 indicates that more than half of the businesses did not respond to any reviews. However, there are some businesses with very high engagement, with response counts reaching up to 372, indicating that a small subset of businesses is actively engaging with their customers.
<br><br>
- The histogram for review_text_count shows that while text reviews are common, their distribution is uneven. On average, about half of the reviews contain text, as indicated by the mean of 114.31 out of 201.74 average total reviews. The standard deviation of 137.09 and the wide range from 12 to 816 reviews indicate that while some businesses have most of their reviews containing text, others have very few.
<br><br>
- The distribution of review_count is skewed, with a concentration of businesses having lower review counts. However, there is a significant number of businesses with much higher counts, as seen by the mean being closer to the 75th percentile than the median (201.74 mean vs. 108 median). This suggests a skew towards businesses with higher engagement.
<br><br>
- The response_count highlights a lack of engagement by most businesses, with both the 25th percentile and median being 0. This indicates that many businesses are not actively managing their online presence by responding to customer feedback.
"""

# Correlation Analysis
correlation_matrix = df_csv[['review_count', 'review_text_count', 'response_count']].corr()
correlation_matrix

"""- The correlation between review_count and review_text_count is 0.947, indicating a very strong positive relationship. This suggests that businesses with a higher total number of reviews also tend to have more text reviews. In other words, as the total number of reviews increases, the number of text reviews tends to increase proportionally.
<br><br>
- The correlation between review_count and response_count is 0.129, which indicates a weak positive relationship. This means that there is a slight tendency for businesses with more reviews to have more responses.
<br><br>
- Similarly, the correlation between review_text_count and response_count is 0.205. This is also a weak positive correlation, suggesting that businesses with more text reviews are somewhat more likely to have more responses.
"""

response_rate = df_csv['response_count'].apply(lambda x: x > 0).mean()
print(f"Percentage of businesses that respond to reviews: {response_rate * 100:.2f}%")

"""•	The relatively low correlation values involving response_count indicate that the number of responses a business gives is not strongly linked to either the total number of reviews or the number of text reviews. This assertion is aligned with our previous findings that businesses are not actively managing their online presence by responding to customer feedback. In fact, only 44.32% percentage of businesses respond to reviews.

<div class="alert alert-block alert-info">
    
### 3.2. Examine the .JSON File <a class="anchor" name="json"></a>

In this section, we focus on analyzing the Google Review data stored in a .JSON file. The .JSON format allows for a more complex and nested structure, capturing detailed customer reviews, including aspects such as ratings, review text, and whether the business responded or included a picture.
"""

json_file_path = 'task1_130.json'
with open(json_file_path, 'r', encoding='utf-8') as file:
    json_data = json.load(file)

# for i, (gmap_id, data) in enumerate(json_data.items()):
#     print(f"gmap_id: {gmap_id}")
#     print(f"Data: {data}")
#     print()
#     if i == 4:
#         break

"""We convert the JSON to a pd Dataframe."""

# List to hold the data
json_records = []

# Iterate over each gmap_id in the JSON data
for gmap_id, data in json_data.items():
    for review in data['reviews']:
        # Extract the relevant fields
        record = {
            'gmap_id': gmap_id,
            'user_id': review.get('user_id'),
            'time': review.get('time'),
            'review_rating': review.get('review_rating'),
            'review_text': review.get('review_text'),
            'if_pic': review.get('if_pic'),
            'if_response': review.get('if_response'),}
        # Append the record to the list
        json_records.append(record)

# Convert the list of records to a DataFrame
df_json = pd.DataFrame(json_records)

# Display the first few rows
df_json.head()

"""After converting the data into a structured DataFrame, we examined its structure and summary statistics to understand the distribution of reviews, ratings, and customer interactions."""

# Display a summary of both DataFrames, including data types and missing values
df_json.info()

# For the JSON DataFrame
print("JSON DataFrame Summary:")
print(df_json.nunique())

df_json.isnull().sum()

"""The analysis revealed that the majority of reviews are positive, with ratings skewed towards the higher end, and a mean rating of 4.32. We found that many reviews lack textual feedback, and businesses often do not respond to reviews, which aligns **with the trends observed in the .CSV data.**"""

df_json.describe()

# Plot the distribution of review ratings in the JSON DataFrame
df_json[['review_rating']].hist(bins=10, figsize=(5, 5))
plt.suptitle("Distribution of Review Ratings")
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

"""- The distribution of review ratings is heavily skewed towards the higher end, with the majority of ratings being 4.0 and above.
<br><br>
- The mean rating is 4.32, indicating that the reviews are quite favorable. This suggests that most customers are satisfied with the service/product they are reviewing.
<br><br>
- There are relatively few reviews with ratings of 1.0 or 2.0, as shown  in the histogram. This could indicate that either negative experiences are rare or it might also mean that people are less likely to leave a review if dissatisfied.
"""

df_json.describe(include=['O'])

"""- The most frequent gmap_id appears 2,009 times, suggesting that a particular business is receiving a disproportionately high number of reviews. This could indicate a popular business.
<br><br>
- 35,076 out of 35,507 user_ids were unique. This indicates that customers are not likely to review more than once.
<br><br>

- The most common entry for review_text is "None", appearing 15,388 times. This indicates that a significant portion of the reviews (15,388 times out of 35,507) do not include any textual feedback.
<br><br>

- Only 34,433 entries indicate that no picture was included with the review, with "N" as the most frequent value. This shows that most users do not upload pictures alongside their reviews.
<br><br>
- "N" is the most common value for if_response, occurring 31,388 times. This suggests that most reviews do not receive a direct response from the business. This is consistent with our previous findings.

<div class="alert alert-block alert-warning">

## 4.  Examining Metadata <a class="anchor" name="examine2"></a>

 </div>

Here, we explored the auxiliary metadata. The metadata provided essential details such as business names, addresses, categories, average ratings, and operational hours. By exploring this metadata, we aimed to enrich our our analysis even further.
"""

meta_file_path = '/Users/fahmidtawsifkhanchowdhury/Documents/Monash/S3/FIT5196/Assignment 1'

# Open the metadata to see the contents
meta_data = []

with open(f'{meta_file_path}/meta-California.json', 'r', encoding='utf-8') as file:
    for i, line in enumerate(file):
        meta_data.append(json.loads(line.strip()))

# Randomly check
print(meta_data[900])

# Convert the list of metadata into a DataFrame
df_meta = pd.DataFrame(meta_data)

# Display the first fexw rows of the metadata DataFrame
df_meta.head(2)

# Check for missing values and data types
print(df_meta.isna().sum())
print(df_meta.dtypes)

"""After analyzing the auxiliary metadata dataset, we found that it includes valuable information such as the business name, address, category, and other relevant details. These data points are necessary for a more comprehensive analysis. By joining this metadata with our task 1 datasets using the gmap_id as the key, we can create a new enriched dataframe that will enhance the depth and quality of our subsequent analysis.

Upon further examining the meta data structure, we found that the structure of the data fields exhibits a variety of formats.

- The category column is presented as a list of strings.

- The hours column is structured as a nested list.

- The MISC column is a dictionary where the keys represent different aspects of the business, and the values are lists that provide specific details.

- The state column can vary between different formats such as 'Open now', 'Open ⋅ Closes 8PM', or 'permanently closed'.

- The relative_results column is a list of strings.

<div class="alert alert-block alert-warning">

## 5.  Data Analysis <a class="anchor" name="DA"></a>

 </div>

 In this section, we are looking into 5 data insights from the data. We believe that by looking into different factors that can impact on a business rating, we can have a better understanding on the importance of xxxxxxx.

We removed any duplicate entries from the df_meta DataFrame based on the gmap_id column, which uniquely identifies each business. This step was crucial to prevent any duplication of data in subsequent analyses.
"""

# Remove duplicates from df_meta
df_meta_clean = df_meta.drop_duplicates(subset=['gmap_id'])

"""We merged the cleaned metadata (df_meta_clean) with the JSON reviews dataset (df_json) using the gmap_id as the key, ensuring that each review was enriched with corresponding business metadata. The merge was performed using a left join, which preserved all review data while adding the relevant metadata fields where available.

The resulting dataset was further merged with the CSV data (df_csv), again using a left join on the gmap_id column. This final merge combined the review details, metadata, and additional numerical insights into a single, comprehensive DataFrame (df_csv_json_meta).
"""

# Merge JSON reviews with metadata
merged_json_meta = pd.merge(df_json, df_meta_clean, on='gmap_id', how='left')

# Merge the above result with the CSV data
df_csv_json_meta = pd.merge(merged_json_meta, df_csv, on='gmap_id', how='left')

df_csv_json_meta.head(1)

# Count the total number of gmap_id entries
df_csv_json_meta['gmap_id'].count()

# Count the number of unique gmap_id entries
df_csv_json_meta['gmap_id'].nunique()

# Check na values
df_csv_json_meta.isna().sum()

# Check data types for reference
df_csv_json_meta.dtypes

"""For temporal analysis, we  converted the time column to a datetime format and extracted key time-based features, which included the hour of the day, the day of the week, the month, and the year from the time column. We then carried out multiple analysis using these features."""

# Convert the 'time' column to datetime
df_csv_json_meta['time'] = pd.to_datetime(df_csv_json_meta['time'])

# Extract time features for possible analysis
df_csv_json_meta['hour'] = df_csv_json_meta['time'].dt.hour
df_csv_json_meta['day_of_week'] = df_csv_json_meta['time'].dt.day_name()
df_csv_json_meta['month'] = df_csv_json_meta['time'].dt.month
df_csv_json_meta['year'] = df_csv_json_meta['time'].dt.year

df_csv_json_meta.head(1)

"""<div class="alert alert-block alert-info">
    
### 5.1. Insight 1: How does Rating affect Response? <a class="anchor" name="5.1"></a>

We analyzed the relationship between review ratings and business responses by first calculating the counts of ‘Y’ (yes) and ‘N’ (no) responses for each review rating. Then, we computed the response ratio as the proportion of ‘Y’ responses to the total responses for each rating.

To visualize this, we created a bar plot showing the response ratio across different review ratings, with data labels indicating the exact values.
"""

# Calculate the count of responses ('Y' and 'N') for each review rating
response_counts = df_json.groupby(['review_rating', 'if_response']).size().unstack().fillna(0)

# Calculate the ratio of 'Y' responses to the total number of responses ('Y' + 'N') for each review rating
response_ratio = response_counts['Y'] / (response_counts['Y'] + response_counts['N'])

# Plot the ratio
plt.figure(figsize=(10, 6))
sns.barplot(x=response_ratio.index, y=response_ratio.values, palette='Blues')

# Add data labels
for index, value in enumerate(response_ratio.values):
    plt.text(x=index, y=value + 0.02, s=f"{value:.2f}", ha='center')

# Set plot title and labels
plt.title('Response Ratio by Review Rating')
plt.xlabel('Review Rating')
plt.ylabel('Response Ratio')
plt.ylim(0, 1)

# Show the plot
plt.show()

"""Some valuable insights can be gathered from the barchart.

- The response ratios across the board are generally low. This is concerning since it indicates that many businesses do not actively engage with their customers regardless of the feedback they receive, which could be an area of improvement for businesses aiming to enhance customer satisfaction and loyalty.
<br><br>
- The highest response ratio is observed for 5-star reviews, where businesses respond to 14% of these reviews. 1 star reviews has the second highest rate. This suggests that businesses are more inclined to engage with customers who leave extremely positive or negative feedback.

<div class="alert alert-block alert-info">
    
### 5.2. Insight 2: Relationship between Text Sentiment and Response <a class="anchor" name="5.2"></a>

To assess the sentiment and characteristics of customer reviews, we first downloaded the VADER lexicon, which is widely used for sentiment analysis.
"""

# Download vader_lexicon to calculate sentiment score
nltk.download('vader_lexicon')

"""We then initialized a SentimentIntensityAnalyzer to calculate sentiment scores for each review in the dataset. A function was applied to the review_text column to generate a sentiment_score, where scores range from -1 (most negative) to 1 (most positive)."""

# Initialize an Instance
sid = SentimentIntensityAnalyzer()

# Function to calculate sentiment score
def get_sentiment_score(text):
    sentiment_dict = sid.polarity_scores(text)
    return sentiment_dict['compound']  # -1 (most negative) and 1 (most positive)

# Create a new column 'sentiment_score'
df_csv_json_meta['sentiment_score'] = df_csv_json_meta['review_text'].apply(get_sentiment_score)

# Display the first few rows
df_csv_json_meta[['review_text', 'sentiment_score']].head(2)

"""We created a review_length column to measure the length of each review. With these new features, we created a subset of the data for further analysis, focusing on the gmap_id, sentiment_score, review_length, review_rating, and if_response."""

# Create review length column
df_csv_json_meta['review_length'] = df_csv_json_meta['review_text'].apply(len)

# Create a df for analysis
df_selected = df_csv_json_meta[['gmap_id', 'sentiment_score', 'review_length', 'review_rating', 'if_response']]
df_selected.head(5)

"""We  grouped the data by if_response to calculate the average review_rating, sentiment_score, and review_length for reviews that received a response versus those that did not and visualised the results."""

# Group by 'if_response' and calculate the average 'review_rating', 'sentiment_score', and 'review_length'
response_stats = df_csv_json_meta.groupby('if_response').agg({'review_rating': 'mean','sentiment_score': 'mean','review_length': 'mean'}).reset_index()

# Display the calculated averages
print(response_stats)

# Create bar charts for comparison
plt.figure(figsize=(14, 6))

# Bar chart for average review rating
plt.subplot(1, 3, 1)
sns.barplot(x='if_response', y='review_rating', data=response_stats)
plt.title('Average Rating by Response Status')
plt.ylabel('Average Rating')

# Bar chart for average sentiment score
plt.subplot(1, 3, 2)
sns.barplot(x='if_response', y='sentiment_score', data=response_stats)
plt.title('Average Sentiment by Response Status')
plt.ylabel('Average Sentiment Score')

# Bar chart for average review length
plt.subplot(1, 3, 3)
sns.barplot(x='if_response', y='review_length', data=response_stats)
plt.title('Average Review Length by Response Status')
plt.ylabel('Average Review Length')

plt.tight_layout()
plt.show()

"""- Reviews that received a response from the business tend to have higher average ratings. This suggests that engaging with customers could positively influence their satisfaction or at least correlate with higher satisfaction levels. It could also indicate that businesses are more likely to respond to higher-rated reviews, although this would require further investigation to confirm.
<br><br>
- There is a notable increase in the sentiment score when a review receives a response. Higher sentiment scores indicate more positive language in the review text, suggesting that responses may encourage or correlate with more positive sentiment. This might reflect that customers feel more valued when businesses engage with them, leading to more positive feedback.
<br><br>
- Reviews that received a response are almost twice as long as those that did not. This can suggest two things:
    -  Businesses are more likely to respond to more detailed reviews.
    - The act of responding might encourage customers to leave more detailed feedback in the first place.

<div class="alert alert-block alert-info">
    
### 5.3. Insight 3: Effect of Covid-19 on Reviews and Business <a class="anchor" name="5.3"></a>

To assess the impact of COVID-19 on customer reviews and business interactions, we first counted the number of reviews per year, visualizing the trend from 2016 to 2021. This analysis highlighted the substantial growth in reviews from 2016 to 2019, reflecting increased consumer engagement during that period.
"""

# Count the number of reviews for each year
reviews_per_year = df_csv_json_meta['year'].value_counts().sort_index()

# Plot the number of reviews per year
plt.figure(figsize=(10, 6))
reviews_per_year.plot(kind='bar', color='skyblue')
plt.title('Number of Reviews Per Year')
plt.xlabel('Year')
plt.ylabel('Number of Reviews')
plt.xticks(rotation=45)
plt.show()

"""For 2021, we noticed missing data for the last 4 months. To account for this, we estimated the number of reviews for the missing months by calculating the average number of reviews per month in 2021 and then multiplying this by the number of missing months. We added this estimate to the actual review count to normalize the data for 2021. We then updated our yearly review count with this normalized data and plotted the adjusted number of reviews per year."""

# Filter the data for 2021
df_2021 = df_csv_json_meta[df_csv_json_meta['year'] == 2021]

# Calculate the number of reviews per month in 2021
reviews_per_month_2021 = df_2021['time'].dt.month.value_counts().sort_index()

# Calculate the average number of reviews per month in 2021
avg_reviews_per_month = reviews_per_month_2021.mean()

# Define the number of missing months for which data is not available
missing_months = 4

# Estimate the number of reviews for the missing months based on the average reviews per month
estimated_reviews_missing_months = avg_reviews_per_month * missing_months

# Calculate the actual total number of reviews in 2021
actual_reviews_2021 = reviews_per_month_2021.sum()

# Normalize the total number of reviews for 2021 by adding the estimated reviews for the missing months
normalized_reviews_2021 = actual_reviews_2021 + estimated_reviews_missing_months

# Make a copy of the reviews_per_year data to avoid modifying the original data
reviews_per_year_copy = reviews_per_year.copy()

# Update the 2021 data in the copied DataFrame with the normalized number of reviews
reviews_per_year_copy.loc[2021] = normalized_reviews_2021

# Sort the data by year to ensure chronological order in the plot
reviews_per_year_copy = reviews_per_year_copy.sort_index()

# Plot the updated bar chart using the copied and updated data
plt.figure(figsize=(10, 6))
reviews_per_year_copy.plot(kind='bar', color='skyblue')
plt.title('Number of Reviews Per Year (Normalized for 2021)')
plt.xlabel('Year')
plt.ylabel('Number of Reviews')
plt.xticks(rotation=45)
plt.show()

"""- The number of reviews increased sharply from 2016 to 2019, reflecting a period of substantial growth in consumer engagement with businesses in California. This surge in reviews likely correlates with an increase in business interactions and visits during this period, such as more people were dining out, visiting stores, and participating in various other activities. The steady rise in reviews suggests a flourishing business environment where consumer activity were high.
<br><br>
- The steep drop in the number of reviews in 2020 is a clear indicator of the impact that the COVID-19 pandemic had on business interactions. The mandatory statewide stay-at-home order, along with the closure or suspension of non-essential businesses such as restaurants, movie theaters, and retail stores, led to a significant reduction in customer visits. This directly resulted in fewer opportunities for consumers to leave reviews which is an indication of how the pandemic severely disrupted normal business operations and consumer behavior.

<div class="alert alert-block alert-info">
    
### 5.4. Insight 4: Comparison of Highest Rated and Lowest Rated Businesses <a class="anchor" name="5.4"></a>

To compare the highest-rated and lowest-rated businesses, we first standardized the category column by converting the list of categories into a string format for easier analysis.
"""

# Convert the 'category' list to a string in a new column
df_csv_json_meta['category_str'] = df_csv_json_meta['category'].apply(lambda x: ', '.join(x) if isinstance(x, list) else str(x))

# Display the first few rows to verify the conversion
df_csv_json_meta[['category', 'category_str']].head()

"""We then obtained the average number of reviews across businesses and filtered out those with more than 108 reviews, focusing on businesses with significant customer engagement."""

# Calculate the average number of reviews
df_csv.describe()

# Filter the DataFrame to count how many businesses have a review_count greater than 100
businesses_with_more_than_100_reviews = df_csv[df_csv['review_count'] > 108].shape[0]

print(f"Number of businesses with more than 100 reviews: {businesses_with_more_than_100_reviews}")

# Filter the DataFrame to include only businesses with review_count greater than 108
filtered_businesses = df_csv[df_csv['review_count'] > 108]

# Extract the gmap_id values
gmap_ids_with_more_than_108_reviews = filtered_businesses['gmap_id']

"""We wrote a function to extract city name from address."""

def extract_city(address):
    if isinstance(address, str):  # Check if the address is a string
        # Regular expression to match the city just before the state abbreviation and ZIP code
        match = re.search(r',\s*([^,]+)\s*,\s*\w{2}\s*\d{5}', address)
        if match:
            return match.group(1).strip()
    return None

df_csv_json_meta['city'] = df_csv_json_meta['address'].apply(extract_city)

"""We selected key columns (gmap_id, name, city, category, price, avg_rating, relative_results) and removed duplicates to ensure each business was represented only once."""

# Create a new DataFrame with the specified columns from df_csv_json_meta
df_selected_columns = df_csv_json_meta[['gmap_id', 'name', 'city', 'category', 'avg_rating']]

# Remove duplicates based on the 'gmap_id' column
df_selected_columns = df_selected_columns.drop_duplicates(subset='gmap_id')

# Display the first few rows of the unique DataFrame to verify
df_selected_columns.head()

"""To identify the top and bottom performers, we sorted the DataFrame by avg_rating, extracting the top 10 and bottom 10 businesses based on their ratings. This provided a clear comparison between businesses that excel in customer satisfaction and those that struggle. This allowed us to obtain valuable insights into what type of businesses are associated with strong and poor customer satisfaction."""

# Convert the 'category' list to a string in a new column
df_selected_columns['category_str'] = df_selected_columns['category'].apply(lambda x: ', '.join(x) if isinstance(x, list) else str(x))

# Sort the DataFrame by 'avg_rating' in descending order for the top 10 businesses
top_10_businesses = df_selected_columns.sort_values(by='avg_rating', ascending=False).head(10)

# Sort the DataFrame by 'avg_rating' in ascending order for the worst 10 businesses
worst_10_businesses = df_selected_columns.sort_values(by = 'avg_rating', ascending=True).head(10)

# Select only the relevant columns
top_10_businesses = top_10_businesses[['name', 'city', 'category_str', 'avg_rating']]

worst_10_businesses = worst_10_businesses[['name', 'city', 'category_str', 'avg_rating']]

top_10_businesses.reset_index(drop=True, inplace=True)
worst_10_businesses.reset_index(drop=True, inplace=True)

# Display the top 10
print("Top 10 Businesses by Average Rating:")
top_10_businesses.head(10)

# Display worst 10 businesses
print("Worst 10 Businesses by Average Rating:")
worst_10_businesses.head(10)

"""The data presents a stark contrast between the top and worst-performing businesses by average rating, highlighting how different industries and services can greatly influence customer satisfaction. The top 10 businesses, which include services like dental clinics, auto repair shops, and marketing consultants, all maintain high average ratings (around 5.0), indicating a strong focus on customer satisfaction and service quality. These businesses likely excel in personalized service and customer engagement, as reflected by their consistently high ratings.

On the other hand, the worst 10 businesses feature entities such as the United States Postal Service, motels, and fast food chains, which generally operate in high-volume, low-touch service environments. The lower average ratings (ranging from 1.5 to 3.3) suggest that these businesses may struggle with maintaining consistent service quality, possibly due to the nature of their operations, which might not prioritize individual customer experiences.

This combined insight underscores the importance of personalized, high-quality service in achieving high customer satisfaction and favorable reviews. Businesses that can maintain a personal touch and engage effectively with customers tend to achieve better ratings, whereas those that operate in more transactional or impersonal environments may face challenges in maintaining high customer satisfaction.

<div class="alert alert-block alert-info">
    
### 5.5. Insight 5: What Relationship does Price have with Review? <a class="anchor" name="5.5"></a>

To investigate the relationship between price categories and review activity, we first standardized the price data by normalizing different symbols for price into a consistent format (e.g., converting ₩ and ₩₩ to `$` and `$$`, respectively). This normalization ensured that price categories were uniform across the dataset.
"""

df_csv_json_meta['price'].unique()

# Function to normalise price
def normalize_price(price):
    if price == '₩':
        return '$'
    elif price == '₩₩':
        return '$$'
    else:
        return price

# Apply the function to create a new column 'normalized_price'
df_csv_json_meta['normalized_price'] = df_csv_json_meta['price'].apply(normalize_price)

# Check results
df_csv_json_meta[df_csv_json_meta['price'].isin(['₩', '₩₩'])][['price', 'normalized_price']].head(2)

"""We then created a new DataFrame, df_price, focusing on key metrics such as normalized_price, review_count, review_text_count, response_count, and avg_rating. We removed duplicate entries to ensure that each business was represented only once."""

df_price = df_csv_json_meta[['normalized_price', 'review_count', 'review_text_count', 'response_count', 'avg_rating']]

df_price = df_price.drop_duplicates()

# Display the first few rows of the new DataFrame to verify
df_price.head(2)

"""We converted the normalized_price column to a categorical variable to treat it correctly in our analysis. We also ensured that dollar signs were handled as regular string characters rather than special symbols."""

# Convert 'price' to a categorical variable explicitly as strings
df_price['normalized_price'] = df_price['normalized_price'].astype(str)

# Treat dollar sign as string and not special character
df_price['normalized_price'] = df_price['normalized_price'].apply(lambda x: x.replace('$', r'\$') if isinstance(x, str) else x)

"""We visualized the average review count across different price categories using a bar plot. This analysis revealed that mid-range businesses tend to attract the highest number of reviews, suggesting they are more accessible and engage a broader customer base. In contrast, high-end businesses had the lowest review counts, indicating that higher prices may correlate with lower customer engagement."""

# Average review_count by price category
plt.figure(figsize=(18, 6))

plt.subplot(1, 3, 1)
sns.barplot(x='normalized_price', y='review_count', data=df_price, ci=None, palette="Blues_d")
plt.title('Average Review Count by Price')
plt.ylabel('Average Review Count')
plt.xlabel('Price Category')

"""- The '\$\$' price category has the highest average review count compared to other price categories. This suggests that mid-range priced businesses attract the most customer engagement in terms of reviews. Consumers may feel that mid-range options offer the best balance of value and quality, prompting them to share their experiences more frequently. This could also indicate that mid-range businesses are more accessible to a broader audience, leading to higher customer interactions and as a result, more reviews.
<br><br>
- The '\$\$\$' price category, representing higher-priced businesses, has the lowest average review count. This suggests that high-end businesses might receive less customer feedback, possibly due to a smaller, more exclusive customer base. Customers at higher price points might have different expectations or be less inclined to leave reviews, or these businesses might serve fewer customers overall, leading to fewer opportunities for reviews. This trend highlights the possibility that as the price increases, customer engagement in terms of reviews tends to decrease.

<div class="alert alert-block alert-warning">

## 6.  Summary <a class="anchor" name="summary"></a>

 </div>

Based on the analysis above, we investigated the following questions:

**How does the review rating affect the likelihood of a business response?**
- Our findings: Higher-rated reviews (5 stars) have a slightly higher response rate, though overall response rates are low across all rating categories. Businesses tend to engage more with extremely positive or extremely negative reviews.
<br><br>
- These findings tell us: Businesses may prioritize their engagement strategies based on the extremity of feedback, leaving room for significant improvement.

**What is the relationship between the sentiment of review text and business responses?**
- Our findings are: Reviews with higher sentiment scores, indicating more positive language, are more likely to receive a response from the business. Additionally, reviews that receive a response tend to be longer and more detailed.
<br><br>
- These findings tell us: Positive customer experiences are more likely to prompt business engagement and businesses may be encouraging more detailed feedback through their responses.

**What was the impact of COVID-19 on the volume of reviews and business interactions?**
- Our findings are: There was a significant decrease in the number of reviews in 2020 due to the COVID-19 pandemic. This reflects the direct impact of the pandemic on consumer behavior and business operations.
<br><br>
- These findings tell us: The pandemic severely disrupted normal business operations and consumer behavior, leading to reduced opportunities for customer reviews and engagement during lockdown periods.

**How do the highest-rated businesses compare to the lowest-rated ones in terms of customer satisfaction?**
- Our findings are: The top 10 businesses by average rating tend to be in sectors that offer personalized services, such as healthcare and repair services, while the lowest-rated businesses are often in high-volume, low-touch sectors like postal services and fast food.
<br><br>
- These findings tell us: Personalized, high-quality customer service is crucial in achieving high customer satisfaction, whereas businesses with less focus on individual customer experiences may struggle with lower ratings.

**What relationship exists between price categories and customer review activity?**
- Our findings are: Mid-range (`$$`) priced businesses receive the highest number of reviews, while higher-priced businesses (`$$$`) tend to have fewer reviews. This suggests that mid-range businesses are more accessible and engage a broader customer base.
<br><br>
- These findings tell us: Price sensitivity plays a role in customer engagement, with mid-range businesses being more likely to receive customer feedback, possibly due to their balance of value and quality. Higher-end businesses may cater to a smaller, more exclusive customer base, resulting in fewer reviews.

<div class="alert alert-block alert-warning">

## 7. References <a class="anchor" name="Ref"></a>

</div>

[1]  Stack Overflow. (2023). How to apply lambda function in pandas dataframe? Available at: https://stackoverflow.com/questions/19913667 Accessed on: 27/08/2024.

[2]  Python Software Foundation. (2024). collections.Counter — High-performance container datatypes. Available at: https://docs.python.org/3/library/collections.html#collections.Counter Accessed on: 29/08/2024.

[3]  Stack Overflow. (2022). How to categorize time of day in Python? Available at: https://stackoverflow.com/questions/50027240 Accessed on: 27/08/2022.   

[4]  Python Software Foundation. (2024). seaborn Documentation. Available at: https://seaborn.pydata.org/ Accessed on: 30/08/2024.

[5] Python Software Foundation. (2024). nltk.sentiment.vader.SentimentIntensityAnalyzer — Sentiment analysis with VADER. Available at: https://www.nltk.org/api/nltk.sentiment.vader.html Accessed on: 29/08/2024.     

[6] Week_5_applied_session-2 (2024) https://learning.monash.edu/mod/resource/view.php?id=3049671. Accessed on: 27/08/2024.
"""